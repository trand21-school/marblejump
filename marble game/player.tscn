[gd_scene load_steps=4 format=3 uid="uid://4uuhpxn5deut"]

[sub_resource type="GDScript" id="GDScript_rqxyi"]
script/source = "extends CharacterBody3D

signal hit

const SPEED = 5.0
const JUMP_VELOCITY = 4.5
@onready var pivot=$Node3D
@export var sens = 0.1

# Get the gravity from the project settings to be synced with RigidBody nodes.
var gravity = ProjectSettings.get_setting(\"physics/3d/default_gravity\")

func _ready():
	Input.mouse_mode =Input.MOUSE_MODE_CAPTURED

func _input(event):
	if event is InputEventMouseMotion:
		rotate_y(deg_to_rad(event.relative.x * sens))
		pivot.rotate_x(deg_to_rad(event.relative.y * sens))
		pivot.rotation.x = clamp(pivot.rotation.x, deg_to_rad(-90), deg_to_rad(45))

func _physics_process(delta):
	# Add the gravity.
	if not is_on_floor():
		velocity.y -= gravity * delta

	# Handle jump.
	if Input.is_action_just_pressed(\"ui_accept\") and is_on_floor():
		velocity.y = JUMP_VELOCITY
	
	if Input.is_action_just_pressed(\"quit\"):
		Input.mouse_mode=Input.MOUSE_MODE_VISIBLE
		get_tree().quit

	# Get the input direction and handle the movement/deceleration.
	# As good practice, you should replace UI actions with custom gameplay actions.
	var input_dir = Input.get_vector(\"move_left\", \"move_right\", \"move_forward\", \"move_back\")
	var direction = (transform.basis * Vector3(input_dir.x, 0, input_dir.y)).normalized()
	if direction:
		velocity.x = direction.x * SPEED
		velocity.z = direction.z * SPEED
	else:
		velocity.x = move_toward(velocity.x, 0, SPEED)
		velocity.z = move_toward(velocity.z, 0, SPEED)

	move_and_slide()

func die():
	get_tree().reload_current_scene()

func _on_death_body_entered(body):
	die()

func _on_player_hit():
	pass


func _on_end_body_entered(body):
	get_tree().change_scene_to_file(\"res://success.tscn\")
"

[sub_resource type="SphereMesh" id="SphereMesh_qv3ix"]

[sub_resource type="SphereShape3D" id="SphereShape3D_2shb4"]

[node name="Player" type="CharacterBody3D"]
script = SubResource("GDScript_rqxyi")

[node name="MeshInstance3D" type="MeshInstance3D" parent="."]
mesh = SubResource("SphereMesh_qv3ix")

[node name="CollisionShape3D" type="CollisionShape3D" parent="."]
shape = SubResource("SphereShape3D_2shb4")

[node name="Node3D" type="Node3D" parent="."]
transform = Transform3D(1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0.212386, 0)

[node name="SpringArm3D" type="SpringArm3D" parent="Node3D"]
spring_length = 4.0
margin = 0.5

[node name="Camera3D" type="Camera3D" parent="Node3D/SpringArm3D"]
transform = Transform3D(1, 0, 0, 0, 0.973587, -0.228317, 0, 0.228317, 0.973587, 0, 1.25526, 2.51612)
